{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "Cc6HeznwlGF1"
      },
      "outputs": [],
      "source": [
        "import requests\n",
        "import pandas as pd\n",
        "import datetime as dt"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# \"華邦電子\"股票代號\n",
        "stock_id = '2344'\n",
        "\n",
        "# 獲取今天的日期（型別：str）\n",
        "date = dt.date.today().strftime(\"%Y%m%d\")\n",
        "# date = 2025/09/11\n",
        "\n",
        "print('今日日期：', date)\n",
        "\n",
        "# 取得證交所網站資料，帶入網址參數 date：時間，stock_id：股票代號\n",
        "# https://www.twse.com.tw/rwd/zh/afterTrading/STOCK_DAY?date=20240918&stockNo=2303\n",
        "stock_data = requests.get(f'https://www.twse.com.tw/rwd/zh/ \\\n",
        "            afterTrading/STOCK_DAY?date={date}&stockNo={stock_id}')\n",
        "\n",
        "# 將結果轉換 JSON 格式\n",
        "json_data = stock_data.json()\n",
        "\n",
        "# 將 JSON 格式轉換爲 Dataframe 格式，\n",
        "# 方便在 Python 中處理結構化資料\n",
        "df = pd.DataFrame(data=json_data['data'],\n",
        "                  columns=json_data['fields'])\n",
        "\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 349
        },
        "id": "KZ0XIxanl_pG",
        "outputId": "87ca83f9-7b81-49e7-eb0d-a3207ec0c3e0"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "今日日期： 20250911\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          日期         成交股數            成交金額    開盤價    最高價    最低價    收盤價   漲跌價差  \\\n",
              "0  114/09/01   79,269,429   1,590,942,508  19.70  20.35  19.60  20.30  +0.60   \n",
              "1  114/09/02  100,967,634   2,035,398,991  20.50  20.65  19.80  19.95  -0.35   \n",
              "2  114/09/03   65,368,703   1,322,465,466  19.95  20.55  19.90  20.10  +0.15   \n",
              "3  114/09/04   65,653,280   1,347,946,204  20.40  20.80  20.30  20.50  +0.40   \n",
              "4  114/09/05  227,254,069   4,992,131,427  20.65  22.55  20.60  22.55  +2.05   \n",
              "5  114/09/08  436,611,844  10,572,092,448  24.65  24.80  22.75  24.60  +2.05   \n",
              "6  114/09/09  237,839,246   5,764,269,263  24.40  24.90  23.70  24.55  -0.05   \n",
              "7  114/09/10  285,159,030   7,189,180,523  24.85  25.70  24.50  24.95  +0.40   \n",
              "8  114/09/11  311,904,444   7,978,439,289  25.70  26.60  24.70  25.00  +0.05   \n",
              "\n",
              "      成交筆數  \n",
              "0   23,880  \n",
              "1   28,982  \n",
              "2   18,065  \n",
              "3   18,539  \n",
              "4   60,412  \n",
              "5  109,218  \n",
              "6   71,135  \n",
              "7   83,227  \n",
              "8   99,894  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-70fe2def-d6a8-4791-bf7c-aa5bb5e00faa\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>日期</th>\n",
              "      <th>成交股數</th>\n",
              "      <th>成交金額</th>\n",
              "      <th>開盤價</th>\n",
              "      <th>最高價</th>\n",
              "      <th>最低價</th>\n",
              "      <th>收盤價</th>\n",
              "      <th>漲跌價差</th>\n",
              "      <th>成交筆數</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>114/09/01</td>\n",
              "      <td>79,269,429</td>\n",
              "      <td>1,590,942,508</td>\n",
              "      <td>19.70</td>\n",
              "      <td>20.35</td>\n",
              "      <td>19.60</td>\n",
              "      <td>20.30</td>\n",
              "      <td>+0.60</td>\n",
              "      <td>23,880</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>114/09/02</td>\n",
              "      <td>100,967,634</td>\n",
              "      <td>2,035,398,991</td>\n",
              "      <td>20.50</td>\n",
              "      <td>20.65</td>\n",
              "      <td>19.80</td>\n",
              "      <td>19.95</td>\n",
              "      <td>-0.35</td>\n",
              "      <td>28,982</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>114/09/03</td>\n",
              "      <td>65,368,703</td>\n",
              "      <td>1,322,465,466</td>\n",
              "      <td>19.95</td>\n",
              "      <td>20.55</td>\n",
              "      <td>19.90</td>\n",
              "      <td>20.10</td>\n",
              "      <td>+0.15</td>\n",
              "      <td>18,065</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>114/09/04</td>\n",
              "      <td>65,653,280</td>\n",
              "      <td>1,347,946,204</td>\n",
              "      <td>20.40</td>\n",
              "      <td>20.80</td>\n",
              "      <td>20.30</td>\n",
              "      <td>20.50</td>\n",
              "      <td>+0.40</td>\n",
              "      <td>18,539</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>114/09/05</td>\n",
              "      <td>227,254,069</td>\n",
              "      <td>4,992,131,427</td>\n",
              "      <td>20.65</td>\n",
              "      <td>22.55</td>\n",
              "      <td>20.60</td>\n",
              "      <td>22.55</td>\n",
              "      <td>+2.05</td>\n",
              "      <td>60,412</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>114/09/08</td>\n",
              "      <td>436,611,844</td>\n",
              "      <td>10,572,092,448</td>\n",
              "      <td>24.65</td>\n",
              "      <td>24.80</td>\n",
              "      <td>22.75</td>\n",
              "      <td>24.60</td>\n",
              "      <td>+2.05</td>\n",
              "      <td>109,218</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>114/09/09</td>\n",
              "      <td>237,839,246</td>\n",
              "      <td>5,764,269,263</td>\n",
              "      <td>24.40</td>\n",
              "      <td>24.90</td>\n",
              "      <td>23.70</td>\n",
              "      <td>24.55</td>\n",
              "      <td>-0.05</td>\n",
              "      <td>71,135</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>114/09/10</td>\n",
              "      <td>285,159,030</td>\n",
              "      <td>7,189,180,523</td>\n",
              "      <td>24.85</td>\n",
              "      <td>25.70</td>\n",
              "      <td>24.50</td>\n",
              "      <td>24.95</td>\n",
              "      <td>+0.40</td>\n",
              "      <td>83,227</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>114/09/11</td>\n",
              "      <td>311,904,444</td>\n",
              "      <td>7,978,439,289</td>\n",
              "      <td>25.70</td>\n",
              "      <td>26.60</td>\n",
              "      <td>24.70</td>\n",
              "      <td>25.00</td>\n",
              "      <td>+0.05</td>\n",
              "      <td>99,894</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-70fe2def-d6a8-4791-bf7c-aa5bb5e00faa')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-70fe2def-d6a8-4791-bf7c-aa5bb5e00faa button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-70fe2def-d6a8-4791-bf7c-aa5bb5e00faa');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-7b7fc6da-02ac-4039-9589-218cf73190d9\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7b7fc6da-02ac-4039-9589-218cf73190d9')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-7b7fc6da-02ac-4039-9589-218cf73190d9 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_283f3cf4-c8ff-4a4e-ae7a-d19cdc9303e0\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_283f3cf4-c8ff-4a4e-ae7a-d19cdc9303e0 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 9,\n  \"fields\": [\n    {\n      \"column\": \"\\u65e5\\u671f\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 9,\n        \"samples\": [\n          \"114/09/10\",\n          \"114/09/02\",\n          \"114/09/08\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6210\\u4ea4\\u80a1\\u6578\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 9,\n        \"samples\": [\n          \"285,159,030\",\n          \"100,967,634\",\n          \"436,611,844\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6210\\u4ea4\\u91d1\\u984d\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 9,\n        \"samples\": [\n          \"7,189,180,523\",\n          \"2,035,398,991\",\n          \"10,572,092,448\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u958b\\u76e4\\u50f9\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 9,\n        \"samples\": [\n          \"24.85\",\n          \"20.50\",\n          \"24.65\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6700\\u9ad8\\u50f9\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 9,\n        \"samples\": [\n          \"25.70\",\n          \"20.65\",\n          \"24.80\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6700\\u4f4e\\u50f9\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 9,\n        \"samples\": [\n          \"24.50\",\n          \"19.80\",\n          \"22.75\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6536\\u76e4\\u50f9\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 9,\n        \"samples\": [\n          \"24.95\",\n          \"19.95\",\n          \"24.60\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6f32\\u8dcc\\u50f9\\u5dee\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"+0.60\",\n          \"-0.35\",\n          \"-0.05\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6210\\u4ea4\\u7b46\\u6578\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 9,\n        \"samples\": [\n          \"83,227\",\n          \"28,982\",\n          \"109,218\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def convert_minguo_to_ad(date_str):\n",
        "    # 113/09/10 透過「/」分割成清單 [113, 09, 10]\n",
        "    # 分配給變數 year=113, month=09, day=10\n",
        "    year, month, day = date_str.split('/')\n",
        "    ad_year = int(year) + 1911  # 將民國年轉換為西元年\n",
        "    return f\"{ad_year}/{month}/{day}\"\n",
        "\n",
        "# 所有民國日期都轉西元日期 e.g.113/09/10 -> 2024/09/10\n",
        "df['日期'] = df['日期'].apply(convert_minguo_to_ad)\n",
        "\n",
        "# 轉換為 pandas 中的 datetime 格式\n",
        "df['日期'] = pd.to_datetime(df['日期'], format='%Y/%m/%d')\n",
        "\n",
        "start_date = '2025/09/01'\n",
        "end_date = '2025/09/11'\n",
        "\n",
        "# 篩選日期\n",
        "filtered_df = df[(df['日期'] >= start_date) & (df['日期'] <= end_date)]\n",
        "\n",
        "print(filtered_df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CD5JQVHrmkpM",
        "outputId": "da7c04d2-9797-4f12-9cec-b871c6c3495e"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "          日期         成交股數            成交金額    開盤價    最高價    最低價    收盤價   漲跌價差  \\\n",
            "0 2025-09-01   79,269,429   1,590,942,508  19.70  20.35  19.60  20.30  +0.60   \n",
            "1 2025-09-02  100,967,634   2,035,398,991  20.50  20.65  19.80  19.95  -0.35   \n",
            "2 2025-09-03   65,368,703   1,322,465,466  19.95  20.55  19.90  20.10  +0.15   \n",
            "3 2025-09-04   65,653,280   1,347,946,204  20.40  20.80  20.30  20.50  +0.40   \n",
            "4 2025-09-05  227,254,069   4,992,131,427  20.65  22.55  20.60  22.55  +2.05   \n",
            "5 2025-09-08  436,611,844  10,572,092,448  24.65  24.80  22.75  24.60  +2.05   \n",
            "6 2025-09-09  237,839,246   5,764,269,263  24.40  24.90  23.70  24.55  -0.05   \n",
            "7 2025-09-10  285,159,030   7,189,180,523  24.85  25.70  24.50  24.95  +0.40   \n",
            "8 2025-09-11  311,904,444   7,978,439,289  25.70  26.60  24.70  25.00  +0.05   \n",
            "\n",
            "      成交筆數  \n",
            "0   23,880  \n",
            "1   28,982  \n",
            "2   18,065  \n",
            "3   18,539  \n",
            "4   60,412  \n",
            "5  109,218  \n",
            "6   71,135  \n",
            "7   83,227  \n",
            "8   99,894  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 設定查找時間\n",
        "date_list = ['20250701', '20250801', '20250901']\n",
        "\n",
        "all_df = pd.DataFrame()\n",
        "\n",
        "# 使用迴圈抓取連續月份資料\n",
        "for date in date_list:\n",
        "    # 取得證交所網站資料，帶入網址參數 date：時間，stock_id：股票代號\n",
        "    # https://www.twse.com.tw/rwd/zh/afterTrading/STOCK_DAY?date=20240918&stockNo=2303\n",
        "    # https://www.twse.com.tw/rwd/zh/afterTrading/BWIBBU?date=20240303&stockNo=2303\n",
        "    url = f'https://www.twse.com.tw/rwd/zh/afterTrading/\\\n",
        "      BWIBBU?date={date}&stockNo={stock_id}'\n",
        "\n",
        "    try:\n",
        "\n",
        "        # 取得證交所網站資\n",
        "        stock_data = requests.get(url)\n",
        "\n",
        "        # 將結果轉換 JSON 格式\n",
        "        json_data = stock_data.json()\n",
        "\n",
        "        # 將 JSON 格式轉換爲 Dataframe 格式，\n",
        "        # 方便在 Python 中處理結構化資料\n",
        "        df = pd.DataFrame(data=json_data['data'],\n",
        "                          columns=json_data['fields'])\n",
        "\n",
        "        # 添加新數據\n",
        "        all_df = pd.concat([all_df, df], ignore_index=True)\n",
        "\n",
        "    except Exception as e:\n",
        "\n",
        "        # 發生錯誤時，列印錯誤訊息\n",
        "        print(f'無法取得{date}的資料, 可能資料量不足.')\n",
        "\n",
        "\n",
        "# 輸出前 5 筆資料\n",
        "print(all_df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VsypNNG0m0uL",
        "outputId": "07443438-8b5b-4511-8301-c0fd7743c4c5"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "            日期 殖利率(%)  股利年度 本益比 股價淨值比  財報年/季\n",
            "0   114年07月01日   0.00   113   -  0.99  114/1\n",
            "1   114年07月02日   0.00   113   -  0.97  114/1\n",
            "2   114年07月03日   0.00   113   -  0.98  114/1\n",
            "3   114年07月04日   0.00   113   -  0.95  114/1\n",
            "4   114年07月07日   0.00   113   -  0.95  114/1\n",
            "5   114年07月08日   0.00   113   -  0.94  114/1\n",
            "6   114年07月09日   0.00   113   -  0.94  114/1\n",
            "7   114年07月10日   0.00   113   -  0.92  114/1\n",
            "8   114年07月11日   0.00   113   -  0.92  114/1\n",
            "9   114年07月14日   0.00   113   -  0.91  114/1\n",
            "10  114年07月15日   0.00   113   -  0.89  114/1\n",
            "11  114年07月16日   0.00   113   -  0.88  114/1\n",
            "12  114年07月17日   0.00   113   -  0.89  114/1\n",
            "13  114年07月18日   0.00   113   -  0.88  114/1\n",
            "14  114年07月21日   0.00   113   -  0.87  114/1\n",
            "15  114年07月22日   0.00   113   -  0.85  114/1\n",
            "16  114年07月23日   0.00   113   -  0.88  114/1\n",
            "17  114年07月24日   0.00   113   -  0.86  114/1\n",
            "18  114年07月25日   0.00   113   -  0.87  114/1\n",
            "19  114年07月28日   0.00   113   -  0.87  114/1\n",
            "20  114年07月29日   0.00   113   -  0.87  114/1\n",
            "21  114年07月30日   0.00   113   -  0.89  114/1\n",
            "22  114年07月31日   0.00   113   -  0.86  114/1\n",
            "23  114年08月01日   0.00   113   -  0.88  114/1\n",
            "24  114年08月04日   0.00   113   -  0.86  114/1\n",
            "25  114年08月05日   0.00   113   -  0.90  114/2\n",
            "26  114年08月06日   0.00   113   -  0.88  114/2\n",
            "27  114年08月07日   0.00   113   -  0.85  114/2\n",
            "28  114年08月08日   0.00   113   -  0.90  114/2\n",
            "29  114年08月11日   0.00   113   -  0.89  114/2\n",
            "30  114年08月12日   0.00   113   -  0.95  114/2\n",
            "31  114年08月13日   0.00   113   -  0.93  114/2\n",
            "32  114年08月14日   0.00   113   -  0.92  114/2\n",
            "33  114年08月15日   0.00   113   -  0.94  114/2\n",
            "34  114年08月18日   0.00   113   -  0.98  114/2\n",
            "35  114年08月19日   0.00   113   -  0.95  114/2\n",
            "36  114年08月20日   0.00   113   -  0.92  114/2\n",
            "37  114年08月21日   0.00   113   -  0.94  114/2\n",
            "38  114年08月22日   0.00   113   -  0.93  114/2\n",
            "39  114年08月25日   0.00   113   -  0.94  114/2\n",
            "40  114年08月26日   0.00   113   -  0.96  114/2\n",
            "41  114年08月27日   0.00   113   -  1.02  114/2\n",
            "42  114年08月28日   0.00   113   -  1.01  114/2\n",
            "43  114年08月29日   0.00   113   -  1.01  114/2\n",
            "44  114年09月01日   0.00   113   -  1.04  114/2\n",
            "45  114年09月02日   0.00   113   -  1.02  114/2\n",
            "46  114年09月03日   0.00   113   -  1.03  114/2\n",
            "47  114年09月04日   0.00   113   -  1.05  114/2\n",
            "48  114年09月05日   0.00   113   -  1.16  114/2\n",
            "49  114年09月08日   0.00   113   -  1.26  114/2\n",
            "50  114年09月09日   0.00   113   -  1.26  114/2\n",
            "51  114年09月10日   0.00   113   -  1.28  114/2\n",
            "52  114年09月11日   0.00   113   -  1.28  114/2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install yfinance"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PY7aiQMInkU0",
        "outputId": "278265d4-30a3-451f-fd63-c199b9aa755a"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: yfinance in /usr/local/lib/python3.12/dist-packages (0.2.65)\n",
            "Requirement already satisfied: pandas>=1.3.0 in /usr/local/lib/python3.12/dist-packages (from yfinance) (2.2.2)\n",
            "Requirement already satisfied: numpy>=1.16.5 in /usr/local/lib/python3.12/dist-packages (from yfinance) (2.0.2)\n",
            "Requirement already satisfied: requests>=2.31 in /usr/local/lib/python3.12/dist-packages (from yfinance) (2.32.4)\n",
            "Requirement already satisfied: multitasking>=0.0.7 in /usr/local/lib/python3.12/dist-packages (from yfinance) (0.0.12)\n",
            "Requirement already satisfied: platformdirs>=2.0.0 in /usr/local/lib/python3.12/dist-packages (from yfinance) (4.4.0)\n",
            "Requirement already satisfied: pytz>=2022.5 in /usr/local/lib/python3.12/dist-packages (from yfinance) (2025.2)\n",
            "Requirement already satisfied: frozendict>=2.3.4 in /usr/local/lib/python3.12/dist-packages (from yfinance) (2.4.6)\n",
            "Requirement already satisfied: peewee>=3.16.2 in /usr/local/lib/python3.12/dist-packages (from yfinance) (3.18.2)\n",
            "Requirement already satisfied: beautifulsoup4>=4.11.1 in /usr/local/lib/python3.12/dist-packages (from yfinance) (4.13.5)\n",
            "Requirement already satisfied: curl_cffi>=0.7 in /usr/local/lib/python3.12/dist-packages (from yfinance) (0.13.0)\n",
            "Requirement already satisfied: protobuf>=3.19.0 in /usr/local/lib/python3.12/dist-packages (from yfinance) (5.29.5)\n",
            "Requirement already satisfied: websockets>=13.0 in /usr/local/lib/python3.12/dist-packages (from yfinance) (15.0.1)\n",
            "Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.12/dist-packages (from beautifulsoup4>=4.11.1->yfinance) (2.8)\n",
            "Requirement already satisfied: typing-extensions>=4.0.0 in /usr/local/lib/python3.12/dist-packages (from beautifulsoup4>=4.11.1->yfinance) (4.15.0)\n",
            "Requirement already satisfied: cffi>=1.12.0 in /usr/local/lib/python3.12/dist-packages (from curl_cffi>=0.7->yfinance) (1.17.1)\n",
            "Requirement already satisfied: certifi>=2024.2.2 in /usr/local/lib/python3.12/dist-packages (from curl_cffi>=0.7->yfinance) (2025.8.3)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.12/dist-packages (from pandas>=1.3.0->yfinance) (2.9.0.post0)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.12/dist-packages (from pandas>=1.3.0->yfinance) (2025.2)\n",
            "Requirement already satisfied: charset_normalizer<4,>=2 in /usr/local/lib/python3.12/dist-packages (from requests>=2.31->yfinance) (3.4.3)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.12/dist-packages (from requests>=2.31->yfinance) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.12/dist-packages (from requests>=2.31->yfinance) (2.5.0)\n",
            "Requirement already satisfied: pycparser in /usr/local/lib/python3.12/dist-packages (from cffi>=1.12.0->curl_cffi>=0.7->yfinance) (2.22)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.12/dist-packages (from python-dateutil>=2.8.2->pandas>=1.3.0->yfinance) (1.17.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# yahoo finance 套件\n",
        "import yfinance as yf\n",
        "# 用來處理和分析結構化數據\n",
        "import pandas as pd\n",
        "\n",
        "# 用來處理時間\n",
        "import datetime as dt"
      ],
      "metadata": {
        "id": "RJZzR06innl8"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 輸入股票代號\n",
        "stock_id = \"2344.tw\"\n",
        "# stock_id = \"2357.tw\"\n",
        "# stock_id = \"AAPL\"\n",
        "# stock_id = \"NVDA\"\n",
        "\n",
        "'''今天往前算幾天'''\n",
        "# 資料結束時間\n",
        "end = dt.date.today()\n",
        "# 抓取半年資料（現在-過去180天）\n",
        "start = end - dt.timedelta(days=180)\n",
        "\n",
        "'''抓取特定時間'''\n",
        "# start = dt.datetime(2025, 1, 1)  # 指定的開始日期\n",
        "# end = dt.datetime(2025, 9, 11)    # 指定的結束日期\n",
        "\n",
        "\n",
        "# 參數1: 股票代號, 參數2: 開始時間, 參數3: 結束時間\n",
        "df = yf.download(stock_id, start=start, end=end).reset_index()\n",
        "\n",
        "# 刪除 Ticker 欄位並取代\n",
        "df.columns = df.columns.droplevel('Ticker')\n",
        "\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 475
        },
        "id": "AnFEKdnNnrDz",
        "outputId": "b5969704-2010-4ee4-cf47-1695c6ef7ac2"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-3257051093.py:19: FutureWarning: YF.download() has changed argument auto_adjust default to True\n",
            "  df = yf.download(stock_id, start=start, end=end).reset_index()\n",
            "[*********************100%***********************]  1 of 1 completed\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Price       Date      Close       High        Low       Open     Volume\n",
              "0     2025-03-17  20.450001  21.549999  20.299999  21.150000  153993173\n",
              "1     2025-03-18  20.350000  20.950001  20.100000  20.650000   91878831\n",
              "2     2025-03-19  20.500000  21.100000  20.299999  20.450001  124877303\n",
              "3     2025-03-20  21.100000  21.200001  20.549999  20.700001  125247605\n",
              "4     2025-03-21  21.049999  21.600000  20.500000  21.100000  138059939\n",
              "..           ...        ...        ...        ...        ...        ...\n",
              "118   2025-09-04  20.500000  20.799999  20.299999  20.400000   65532974\n",
              "119   2025-09-05  22.549999  22.549999  20.600000  20.650000  226629036\n",
              "120   2025-09-08  24.600000  24.799999  22.750000  24.650000  435706691\n",
              "121   2025-09-09  24.549999  24.900000  23.700001  24.400000  237398509\n",
              "122   2025-09-10  24.950001  25.700001  24.500000  24.850000  284634798\n",
              "\n",
              "[123 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b484115a-fd11-4c54-b026-2f644505f5c8\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>Price</th>\n",
              "      <th>Date</th>\n",
              "      <th>Close</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Open</th>\n",
              "      <th>Volume</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2025-03-17</td>\n",
              "      <td>20.450001</td>\n",
              "      <td>21.549999</td>\n",
              "      <td>20.299999</td>\n",
              "      <td>21.150000</td>\n",
              "      <td>153993173</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2025-03-18</td>\n",
              "      <td>20.350000</td>\n",
              "      <td>20.950001</td>\n",
              "      <td>20.100000</td>\n",
              "      <td>20.650000</td>\n",
              "      <td>91878831</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2025-03-19</td>\n",
              "      <td>20.500000</td>\n",
              "      <td>21.100000</td>\n",
              "      <td>20.299999</td>\n",
              "      <td>20.450001</td>\n",
              "      <td>124877303</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2025-03-20</td>\n",
              "      <td>21.100000</td>\n",
              "      <td>21.200001</td>\n",
              "      <td>20.549999</td>\n",
              "      <td>20.700001</td>\n",
              "      <td>125247605</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2025-03-21</td>\n",
              "      <td>21.049999</td>\n",
              "      <td>21.600000</td>\n",
              "      <td>20.500000</td>\n",
              "      <td>21.100000</td>\n",
              "      <td>138059939</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>118</th>\n",
              "      <td>2025-09-04</td>\n",
              "      <td>20.500000</td>\n",
              "      <td>20.799999</td>\n",
              "      <td>20.299999</td>\n",
              "      <td>20.400000</td>\n",
              "      <td>65532974</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>119</th>\n",
              "      <td>2025-09-05</td>\n",
              "      <td>22.549999</td>\n",
              "      <td>22.549999</td>\n",
              "      <td>20.600000</td>\n",
              "      <td>20.650000</td>\n",
              "      <td>226629036</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>120</th>\n",
              "      <td>2025-09-08</td>\n",
              "      <td>24.600000</td>\n",
              "      <td>24.799999</td>\n",
              "      <td>22.750000</td>\n",
              "      <td>24.650000</td>\n",
              "      <td>435706691</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>121</th>\n",
              "      <td>2025-09-09</td>\n",
              "      <td>24.549999</td>\n",
              "      <td>24.900000</td>\n",
              "      <td>23.700001</td>\n",
              "      <td>24.400000</td>\n",
              "      <td>237398509</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>122</th>\n",
              "      <td>2025-09-10</td>\n",
              "      <td>24.950001</td>\n",
              "      <td>25.700001</td>\n",
              "      <td>24.500000</td>\n",
              "      <td>24.850000</td>\n",
              "      <td>284634798</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>123 rows × 6 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b484115a-fd11-4c54-b026-2f644505f5c8')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b484115a-fd11-4c54-b026-2f644505f5c8 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b484115a-fd11-4c54-b026-2f644505f5c8');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-ce9a7323-3186-4c6f-bbc3-b79a9891b010\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ce9a7323-3186-4c6f-bbc3-b79a9891b010')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-ce9a7323-3186-4c6f-bbc3-b79a9891b010 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_c300b050-21e2-4630-a950-d9ed932575bf\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_c300b050-21e2-4630-a950-d9ed932575bf button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 123,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2025-03-17 00:00:00\",\n        \"max\": \"2025-09-10 00:00:00\",\n        \"num_unique_values\": 123,\n        \"samples\": [\n          \"2025-04-14 00:00:00\",\n          \"2025-05-22 00:00:00\",\n          \"2025-05-26 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.9193620983232786,\n        \"min\": 13.699999809265137,\n        \"max\": 24.950000762939453,\n        \"num_unique_values\": 79,\n        \"samples\": [\n          18.149999618530273,\n          20.450000762939453,\n          15.600000381469727\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"High\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.9562038643017743,\n        \"min\": 14.800000190734863,\n        \"max\": 25.700000762939453,\n        \"num_unique_values\": 80,\n        \"samples\": [\n          16.649999618530273,\n          21.549999237060547,\n          16.399999618530273\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Low\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.8127334582879766,\n        \"min\": 13.600000381469727,\n        \"max\": 24.5,\n        \"num_unique_values\": 75,\n        \"samples\": [\n          19.950000762939453,\n          17.049999237060547,\n          17.799999237060547\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Open\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.894832467449335,\n        \"min\": 14.199999809265137,\n        \"max\": 24.850000381469727,\n        \"num_unique_values\": 79,\n        \"samples\": [\n          15.850000381469727,\n          21.149999618530273,\n          15.449999809265137\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 62778586,\n        \"min\": 4663752,\n        \"max\": 435706691,\n        \"num_unique_values\": 123,\n        \"samples\": [\n          81927153,\n          49581049,\n          35164530\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# 畫布尺寸大小設定\n",
        "plt.figure(figsize=(12, 7))\n",
        "\n",
        "# 設定要繪製的資料欄位\n",
        "plt.plot(df['Close'], label='Close')\n",
        "\n",
        "# 設定 x 軸的時間\n",
        "num = 10\n",
        "date = df[\"Date\"].dt.strftime('%Y-%m-%d')\n",
        "plt.xticks(date[::len(date)//num].index,  # 設定在 x 軸上顯示標籤的位置（索引），這些位置間隔為 len(date)//num\n",
        "           date[::len(date)//num],  # 設定顯示在 x 軸上的日期標籤，數量為 num，間隔為 len(date)//num\n",
        "           rotation = 45) # 讓日期標籤旋轉 45 度，以避免標籤之間重疊，提高可讀性\n",
        "\n",
        "# 設定圖表的標題，x 軸和 y 軸的標籤\n",
        "plt.title(f'{stock_id}')   # 將股票代號設為圖標\n",
        "plt.xlabel('Date')         # x 軸標籤\n",
        "plt.ylabel('Price')  # y 軸標籤\n",
        "plt.legend(loc='upper left') # 在左上角顯示圖例\n",
        "plt.grid(True) # 在圖上顯示網格\n",
        "plt.tight_layout()  # 自動調整圖表中的間距，避免元素之間的重疊\n",
        "\n",
        "# 顯示圖表\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 707
        },
        "id": "LwVSzZ-3n2SM",
        "outputId": "9203b698-56cb-461d-eb90-fada99537f1b"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x700 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 用來處理時間\n",
        "from datetime import datetime, timedelta\n",
        "# 解析網頁內容\n",
        "from bs4 import BeautifulSoup"
      ],
      "metadata": {
        "id": "YI7UFhzDoN85"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def yahoo_stock(stock_id):\n",
        "    # 取得證交所網站資，帶入網址參數 date：時間，stock_id：股票代號\n",
        "    url = f'https://tw.stock.yahoo.com/quote/{stock_id}.TW'\n",
        "\n",
        "    # 使用 requests 取得網頁內容\n",
        "    response = requests.get(url)\n",
        "\n",
        "    # 取得 HTML 文本\n",
        "    html = response.content\n",
        "\n",
        "    # 使用 Beautiful Soup 解析 HTML 內容\n",
        "    soup = BeautifulSoup(html, 'html.parser')\n",
        "\n",
        "    # 使用 find 與 find_all 定位 HTML 的標籤\n",
        "    # HTML 標籤中的 section id=qsp-overview-realtime-info 下的 time\n",
        "    time_element = soup.find('section',\\\n",
        "                {'id': 'qsp-overview-realtime-info'}).find('time')\n",
        "    # HTML 標籤中的 section id=qsp-overview-realtime-info 下的 ul li\n",
        "    table_soups = soup.find('section',\\\n",
        "                {'id': 'qsp-overview-realtime-info'}).find('ul')\\\n",
        "                                   .find_all('li')\n",
        "\n",
        "    # 欄位資料\n",
        "    fields = []\n",
        "    # 放資料\n",
        "    datas = []\n",
        "\n",
        "    # 使用 for 迴圈取得表格中細部內容\n",
        "    for table_soup in table_soups:\n",
        "\n",
        "        # 表格中的 span 標籤\n",
        "        table_datas = table_soup.find_all('span')\n",
        "\n",
        "        for num, table_data in enumerate(table_datas):\n",
        "\n",
        "            if table_data.text == '': # 表格內容空就跳過\n",
        "                continue\n",
        "\n",
        "            # 新增資料\n",
        "            if num == 0:\n",
        "                fields.append(table_data.text)\n",
        "            else:\n",
        "                datas.append(table_data.text)\n",
        "\n",
        "    # 建立 DataFrame\n",
        "    df = pd.DataFrame([datas], columns=fields)\n",
        "\n",
        "    # 增加日期和股號欄位\n",
        "    df.insert(0,'日期',time_element['datatime'])\n",
        "    df.insert(1,'股號',stock_id)\n",
        "\n",
        "    # 回傳 DataFrame\n",
        "    return df\n",
        "\n",
        "\n",
        "'''main'''\n",
        "\n",
        "# \"華邦電子\"股票代號\n",
        "stock_id = '2344'\n",
        "\n",
        "# 呼叫定義函數\n",
        "yahoo_stock(stock_id)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 81
        },
        "id": "_G42kFAioSWE",
        "outputId": "6719f55b-d041-47e2-9d60-807549e5fe75"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                 日期    股號     成交     開盤     最高     最低     均價 成交金額(億)     昨收  \\\n",
              "0  2025/09/11 14:30  2344  25.00  25.70  26.60  24.70  25.58   79.62  24.95   \n",
              "\n",
              "     漲跌幅    漲跌       總量       昨量     振幅  \n",
              "0  0.20%  0.05  311,250  284,606  7.62%  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3f5a1d69-fc19-4f1c-8bfc-386a9cd74262\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>日期</th>\n",
              "      <th>股號</th>\n",
              "      <th>成交</th>\n",
              "      <th>開盤</th>\n",
              "      <th>最高</th>\n",
              "      <th>最低</th>\n",
              "      <th>均價</th>\n",
              "      <th>成交金額(億)</th>\n",
              "      <th>昨收</th>\n",
              "      <th>漲跌幅</th>\n",
              "      <th>漲跌</th>\n",
              "      <th>總量</th>\n",
              "      <th>昨量</th>\n",
              "      <th>振幅</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2025/09/11 14:30</td>\n",
              "      <td>2344</td>\n",
              "      <td>25.00</td>\n",
              "      <td>25.70</td>\n",
              "      <td>26.60</td>\n",
              "      <td>24.70</td>\n",
              "      <td>25.58</td>\n",
              "      <td>79.62</td>\n",
              "      <td>24.95</td>\n",
              "      <td>0.20%</td>\n",
              "      <td>0.05</td>\n",
              "      <td>311,250</td>\n",
              "      <td>284,606</td>\n",
              "      <td>7.62%</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3f5a1d69-fc19-4f1c-8bfc-386a9cd74262')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3f5a1d69-fc19-4f1c-8bfc-386a9cd74262 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3f5a1d69-fc19-4f1c-8bfc-386a9cd74262');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"yahoo_stock(stock_id)\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"\\u65e5\\u671f\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"2025/09/11 14:30\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u80a1\\u865f\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"2344\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6210\\u4ea4\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"25.00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u958b\\u76e4\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"25.70\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6700\\u9ad8\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"26.60\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6700\\u4f4e\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"24.70\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5747\\u50f9\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"25.58\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6210\\u4ea4\\u91d1\\u984d(\\u5104)\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"79.62\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6628\\u6536\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"24.95\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6f32\\u8dcc\\u5e45\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"0.20%\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6f32\\u8dcc\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"0.05\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u7e3d\\u91cf\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"311,250\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6628\\u91cf\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"284,606\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u632f\\u5e45\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"7.62%\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "url = f'https://tw.stock.yahoo.com/quote/{stock_id}/income-statement'\n",
        "words = url.split('/')\n",
        "print(words)\n",
        "\n",
        "k = words[-1]\n",
        "print(k)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "klserfBiofqW",
        "outputId": "5e816013-52ca-4a1f-ae87-2b5f0c6d9b58"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['https:', '', 'tw.stock.yahoo.com', 'quote', '2344', 'income-statement']\n",
            "income-statement\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 函數可用於奇摩財報\n",
        "def url_find(url):\n",
        "\n",
        "    # 取得 url 的所有 route\n",
        "    words = url.split('/')\n",
        "\n",
        "    # 取得最後一個 route\n",
        "    # 為了知道是損益表、資產負債表、現金流量表\n",
        "    laset_word = words[-1]\n",
        "\n",
        "    # 使用requests取得網頁內容\n",
        "    response = requests.get(url)\n",
        "\n",
        "    # 取得 HTML 文本\n",
        "    html = response.content\n",
        "\n",
        "    # 使用Beautiful Soup解析HTML內容\n",
        "    soup = BeautifulSoup(html, 'html.parser')\n",
        "\n",
        "    # 找到表格的表頭 qsp-incom-statment-table\n",
        "    table_soup = soup.find('section', {'id': 'qsp-{}-table'.format(laset_word)})\n",
        "\n",
        "    # 找到對應類別標籤\n",
        "    table_fields=table_soup.find('div', class_='table-header')\n",
        "\n",
        "    # 解析表頭內容\n",
        "    table_fields_lines = list(table_fields.stripped_strings)\n",
        "\n",
        "\n",
        "    # 找到對應的資料\n",
        "    data_rows = table_soup.find_all('li' ,class_='List(n)')\n",
        "\n",
        "    # 解析資料行內容\n",
        "    data = []\n",
        "    for row in data_rows:\n",
        "        row_data = list(row.stripped_strings)\n",
        "        data.append(row_data)\n",
        "\n",
        "    # 建立 DataFrame\n",
        "    df = pd.DataFrame(data, columns=table_fields_lines)\n",
        "    return df\n",
        "\n",
        "'''main'''\n",
        "\n",
        "# 抓損益表\n",
        "# url = f'https://tw.stock.yahoo.com/quote/{stock_id}/income-statement'\n",
        "# 抓資產負債表\n",
        "# url = f'https://tw.stock.yahoo.com/quote/{stock_id}/balance-sheet'\n",
        "# 抓現金流量表\n",
        "url = f'https://tw.stock.yahoo.com/quote/{stock_id}/cash-flow-statement'\n",
        "\n",
        "# 抓取季報表資料\n",
        "df = url_find(url).transpose()\n",
        "\n",
        "# 資料處理\n",
        "df.columns = df.iloc[0]\n",
        "df = df[1:]\n",
        "df.insert(0, '年度/季別', df.index)\n",
        "df.columns.name = None\n",
        "df.reset_index(drop=True, inplace=True)\n",
        "\n",
        "# 輸出資料後5筆\n",
        "print(df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eC2-K_OsojyO",
        "outputId": "c851d7f5-82a3-46fe-831a-9814d81afb74"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "      年度/季別       營業現金流        投資現金流       融資現金流        自由現金流        淨現金流\n",
            "0   2025 Q2   2,437,395   -1,824,099   2,442,633      613,296   1,938,708\n",
            "1   2025 Q1     392,681   -2,045,206   5,456,635   -1,652,525   4,278,093\n",
            "2   2024 Q4   2,550,284   -3,369,963    -565,004     -819,679  -1,404,264\n",
            "3   2024 Q3   2,095,938   -2,982,273   2,696,394     -886,335   2,096,142\n",
            "4   2024 Q2   4,756,945   -2,040,067  -2,849,374    2,716,878    -301,651\n",
            "5   2024 Q1   1,722,713   -8,265,517   3,244,900   -6,542,804  -3,252,429\n",
            "6   2023 Q4   2,959,830   -6,535,846     355,698   -3,576,016  -3,390,353\n",
            "7   2023 Q3     548,657   -1,804,493   3,814,596   -1,255,836   2,712,497\n",
            "8   2023 Q2    -395,767   -2,129,805   2,225,675   -2,525,572    -488,682\n",
            "9   2023 Q1     488,753   -2,561,407     -45,642   -2,072,654  -2,273,800\n",
            "10  2022 Q4   1,685,964   -6,788,663   7,336,367   -5,102,699   2,112,278\n",
            "11  2022 Q3   2,212,829  -12,405,373   1,657,674  -10,192,544  -8,128,603\n",
            "12  2022 Q2   3,659,648  -15,955,737   8,515,272  -12,296,089  -3,734,033\n",
            "13  2022 Q1   8,137,711   -9,332,435     370,012   -1,194,724    -761,133\n",
            "14  2021 Q4  11,840,652   -3,086,815     117,223    8,753,837   8,574,029\n",
            "15  2021 Q3   8,792,172   -2,695,860  -1,412,977    6,096,312   4,589,834\n",
            "16  2021 Q2   6,424,533   -1,563,142      70,471    4,861,391   4,665,929\n",
            "17  2021 Q1   3,318,027   -1,254,063    -559,962    2,063,964   1,340,329\n",
            "18  2020 Q4   4,536,472   -1,348,995    -587,999    3,187,477   2,508,511\n",
            "19  2020 Q3   2,268,213   -9,967,220   4,387,304   -7,699,007  -3,322,994\n"
          ]
        }
      ]
    }
  ]
}
